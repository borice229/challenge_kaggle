knitr::opts_chunk$set(echo = TRUE)
Y_train<-read.csv("y_train.csv",sep=",",header=T)
View(Y_train)
Y<-ts(Y_train)
library(forecast)
install.packages("forecast")
library(forecast)
library(forecast)
plot(Y)
View(Y_train)
Y<-ts(Y_train$spot_id_delta)
plot(Y)
# Définir 'DELIVERY_START' comme "index"
rownames(Y_train) <- Y_train$DELIVERY_START
# Supprimer la colonne d'origine si nécessaire
Y_train$DELIVERY_START <- NULL
# Afficher le DataFrame avec l'index
print(Y_train)
Y<-ts(Y_train)
plot(Y)
knitr::opts_chunk$set(echo = TRUE)
library(forecast)
library(TSstudio)
library(prophet)# modèle de prévision Prophet Facebook
library(lubridate)
library(ggplot2) # Visualisation statique
library(plotly)
library(forecast)
library(TSstudio)
library(prophet)# modèle de prévision Prophet Facebook
library(lubridate)
library(ggplot2) # Visualisation statique
library(plotly)
Y_train<-read.csv("y_train.csv",sep=",",header=T)
Y<-ts(Y_train,start=c(year(min(Y_train$date)),month(min(Y_train$date))),
frequency = 24)
# Extraire les colonnes nécessaires
dates <- Y_train$DELIVERY_START
# Créer l'objet time series
Y <- ts(Y_train$spot_id_delta,
start = c(year(min(dates)), month(min(dates)), hour(min(dates))),
frequency = 24)
# Vérification de la série temporelle
plot(Y)
#Model Prophet
Y_train_prophet<-Y_train %>%
rename(ds=DELIVERY_START,y=spot_id_delta)
md1<- prophet(Y_train_prophet,yearly.seasonality = TRUE)
#Model Auto Arima
md2<- forecast(auto.arima(Y))
#Model TBATS
md3<-forecast(tbats(Y))
forecast(md2(),h=24)
forecast(md2,h=24)
knitr::opts_chunk$set(echo = TRUE)
library(forecast)
library(TSstudio)
library(prophet)# modèle de prévision Prophet Facebook
library(lubridate)
library(ggplot2) # Visualisation statique
library(plotly)
library(forecast)
library(TSstudio)
library(prophet)# modèle de prévision Prophet Facebook
library(lubridate)
library(ggplot2) # Visualisation statique
library(plotly)
Y_train<-read.csv("y_train.csv",sep=",",header=T)
# Extraire les colonnes nécessaires
dates <- Y_train$DELIVERY_START
# Créer l'objet time series
Y <- ts(Y_train$spot_id_delta,
start = c(year(min(dates)), month(min(dates)), hour(min(dates))),
frequency = 24)
# Vérification de la série temporelle
plot(Y)
# Extraire les colonnes nécessaires
dates <- Y_train$DELIVERY_START
# Créer l'objet time series
Y <- ts(Y_train$spot_id_delta,
start = c(year(min(dates)), month(min(dates)), hour(min(dates))),
frequency = 24)
# Vérification de la série temporelle
plot(Y,dates)
# Extraire les colonnes nécessaires
dates <- Y_train$DELIVERY_START
# Créer l'objet time series
Y <- ts(Y_train$spot_id_delta,
start = c(year(min(dates)), month(min(dates)), hour(min(dates))),
frequency = 24)
# Vérification de la série temporelle
plot(dates,Y)
dates
# Extraire les colonnes nécessaires
dates <- Y_train$DELIVERY_START
# Vérifier le format de dates et le convertir si nécessaire
dates <- as.POSIXct(dates)
# Créer l'objet time series
Y <- ts(Y_train$spot_id_delta,
start = c(year(min(dates)), month(min(dates)), hour(min(dates))),
frequency = 24)
# Vérification de la série temporelle
plot(Y, main="Série temporelle de spot_id_delta", xlab="Date", ylab="Valeur")
dates
library(forecast)
setwd("C:/Users/boric/OneDrive/Documents/Série temporelle/regreAR")
s<-read.delim("C:/Users/boric/OneDrive/Documents/Série temporelle/regreAR/serie1.txt",sep = "")
View(s)
X<-ts(s)
plot(X)
acf(X)
pacf(X)
Sit <- auto.arima(X)
Sit
fit_cv <- auto.arima(X, stepwise = FALSE, approximation = FALSE)
fit_cv
z<-read.delim("C:/Users/boric/OneDrive/Documents/Série temporelle/regreAR/serie2.txt",sep = "")
Z<-ts(z)
plot(Z)
acf(Z)
Y_train<-read.csv("y_train.csv",sep=",",header=T)
# Extraire les colonnes nécessaires
Y_train$DELIVERY_START <- as.POSIXct(Y_train$DELIVERY_START)
View(Y_train)
# Extraire les colonnes nécessaires
Y_train$DELIVERY_START <- as.POSIXct(Y_train$DELIVERY_START)
#Model Prophet
Y_train_prophet<-Y_train %>%
rename(ds=DELIVERY_START,y=spot_id_delta)
# Initialiser et ajuster le modèle Prophet
model_prophet <- prophet(Y_train_prophet)
# Faire des prédictions pour une période donnée
future <- make_future_dataframe(model_prophet, periods = 365)  # Prédire sur 365 jours ou ajuster selon besoin
forecast_prophet <- predict(model_prophet, future)
# Visualiser les prédictions de Prophet
plot(model_prophet, forecast_prophet)
#Model Prophet
data_prophet<-Y_train %>%
rename(ds=DELIVERY_START,y=spot_id_delta)
# Initialiser le modèle Prophet en désactivant la saisonnalité annuelle
model_prophet <- prophet(
data_prophet,
yearly.seasonality = FALSE,      # Désactive la saisonnalité annuelle
weekly.seasonality = TRUE,       # Active la saisonnalité hebdomadaire
daily.seasonality = TRUE         # Active la saisonnalité quotidienne
)
# Créer un dataframe pour les prédictions futures
# Pour des prédictions horaires, ajustez la période selon votre besoin (par exemple, 7 jours = 168 heures)
future <- make_future_dataframe(model_prophet, periods = 168, freq = "hour")
# Générer les prédictions
forecast_prophet <- predict(model_prophet, future)
# Visualiser les prédictions
plot(model_prophet, forecast_prophet)
knitr::opts_chunk$set(echo = TRUE)
str(Y_train)
summary(Y_train)
# Par exemple, prenez une sous-série de la première semaine
xts_sample <- xts_data[1:168, ]  # 7 jours, 24 heures par jour
library(xts)
# Créer un objet xts
xts_data <- xts(Y_train$spot_id_delta, order.by = Y_train$DELIVERY_START)
# Visualisation
plot(xts_data, main = "Spot ID Delta Over Time", xlab = "Date", ylab = "Spot ID Delta")
library(xts)
# Créer un objet xts
xts_data <- xts(Y_train$spot_id_delta, order.by = Y_train$DELIVERY_START)
# Visualisation
plot(xts_data, main = "Spot ID Delta Over Time", xlab = "Date", ylab = "Spot ID Delta")
# Par exemple, prenez une sous-série de la première semaine
xts_sample <- xts_data[1:168, ]  # 7 jours, 24 heures par jour
stl_sample <- stl(xts_sample, s.window = "periodic")
# Par exemple, prenez une sous-série de la première semaine
xts_sample <- xts_data[1:168, ]  # 7 jours, 24 heures par jour
stl_sample <- stl(xts_sample, s.window = 24)
# Par exemple, prenez une sous-série de la première semaine
xts_sample <- xts_data[1:168, ]  # 7 jours, 24 heures par jour
stl_sample <- stl(xts_sample, s.window = 7)
library(tseries)
adf.test(xts_data)
library(tseries)
adf.test(xts_data)
model <- auto.arima(xts_data)
library(forecast)
library(forecast)
model <- auto.arima(xts_data)
forecast_values <- forecast(model, h = 24)
plot(forecast_values)
acf(xts_data)
pcf(xts_data)
```{r}
pacf(xts_data)
# Diviser la série temporelle
train_size <- floor(0.7 * length(xts_data))  # 70% pour l'entraînement
test_size_1 <- floor(0.15 * length(xts_data))  # 15% pour le premier test
test_size_2 <- length(xts_data) - train_size - test_size_1  # 15% pour le deuxième test
train_data <- xts_data[1:train_size]
test_data_1 <- xts_data[(train_size + 1):(train_size + test_size_1)]
test_data_2 <- xts_data[(train_size + test_size_1 + 1):length(xts_data)]
# Visualiser l'ACF et PACF
pacf(train_data, main="PACF of Train Data")
acf(train_data, main="ACF of Train Data")
# Ajuster un modèle ARIMA sur les données d'entraînement
library(forecast)
model <- auto.arima(train_data)
summary(model)
# Ajuster un modèle ARIMA avec p=6666 et q=17000
model_e <- arima(train_data, order=c(6666, 0, 17000))
# Ajuster un modèle ARIMA avec p=6666 et q=17000
model_e <- arima(train_data, order=c(3, 0, 4))
# Résumé du modèle
summary(model_e)
# Ajuster un modèle ARIMA avec p=6666 et q=17000
model_e <- arima(train_data, order=c(3, 1, 4))
# Résumé du modèle
summary(model_e)
# Ajuster un modèle ARIMA avec p=6666 et q=17000
model_e <- arima(train_data, order=c(3,1 , 3))
# Résumé du modèle
summary(model_e)
# Ajuster un modèle ARIMA avec p=6666 et q=17000
model_e <- arima(train_data, order=c(3,1 , 4))
# Résumé du modèle
summary(model_e)
# Ajuster un modèle ARIMA avec p=6666 et q=17000
model_e <- arima(train_data, order=c(3,1 , 4),stepwise = FALSE, approximation = FALSE)
# Ajuster un modèle ARIMA sur les données d'entraînement
library(forecast)
model <- auto.arima(train_data,stepwise = FALSE, approximation = FALSE)
summary(model)
# Ajuster un modèle ARIMA avec p=6666 et q=17000
model_e <- arima(train_data, order=c(3,0 , 3),include.mean = F)
# Résumé du modèle
summary(model_e)
# Ajuster un modèle ARIMA avec p=6666 et q=17000
model_e <- arima(train_data, order=c(2,0 , 3),include.mean = F)
# Résumé du modèle
summary(model_e)
# Ajuster un modèle ARIMA avec p=6666 et q=17000
model_e <- arima(train_data, order=c(2,0 , 2),include.mean = F)
# Résumé du modèle
summary(model_e)
# Ajuster un modèle ARIMA avec p=6666 et q=17000
model_e <- arima(train_data, order=c(3,0 , 2),include.mean = F)
# Résumé du modèle
summary(model_e)
# Ajuster un modèle ARIMA avec p=6666 et q=17000
model_e <- arima(train_data, order=c(3,0 , 3),include.mean = F)
# Résumé du modèle
summary(model_e)
# Appliquer les prévisions sur les données de test1_data
predictions <- forecast(model_e, newdata = test1_data)
# Tracer les prévisions avec les données réelles
plot(predictions, main = "Prévisions ARIMA pour test1_data", xlim = range(c(test1_data, predictions$mean)))
# Appliquer les prévisions sur les données de test1_data
predictions <- forecast(model_e, newdata = test_data_1)
# Tracer les prévisions avec les données réelles
plot(predictions, main = "Prévisions ARIMA pour test1_data", xlim = range(c(test_data_1, predictions$mean)))
# Assurez-vous que test_data_1 est un xts
test_data_1_xts <- xts(test_data_1, order.by = index(xts_data)[(length(train_data)+1):(length(train_data)+length(test_data_1))])
# Appliquer les prévisions sur les données de test_data_1
predictions <- forecast(model_e, h = length(test_data_1_xts))
# Tracer les prévisions avec les données réelles
plot(predictions, main = "Prévisions ARIMA pour test_data_1", xlim = range(c(index(test_data_1_xts), index(predictions$mean))))
lines(test_data_1_xts, col = "red") # Ajout des données réelles
legend("topright", legend = c("Prévisions", "Réel"), col = c("blue", "red"), lty = 1)
# Appliquer les prévisions sur les données de test_data_1
predictions <- forecast(model_e, h = length(test_data_1_xts))
# Tracer les prévisions avec les données réelles
plot(predictions, main = "Prévisions ARIMA pour test_data_1", xlim = range(c(index(test_data_1_xts), index(predictions$mean))))
# Ajouter les données réelles en rouge
lines(test_data_1_xts, col = "red")
# Ajouter une légende
legend("topright", legend = c("Prévisions", "Réel"), col = c("blue", "red"), lty = 1)
# Ajuster la fréquence de l'affichage des axes
axis(1, at = seq(from = min(index(test_data_1_xts)), to = max(index(test_data_1_xts)), by = 100))  # Espacer les points sur l'axe x
# Appliquer les prévisions sur les données de test_data_1
predictions <- forecast(model_e, h = length(test_data_1_xts))
# Tracer les prévisions sur la période de test_data_1
plot(predictions, main = "Prévisions ARIMA pour test_data_1", xlim = range(index(test_data_1_xts)))
# Ajouter les données réelles de test_data_1
lines(index(test_data_1_xts), test_data_1_xts, col = "red")
# Ajouter une légende
legend("topright", legend = c("Prévisions", "Réel"), col = c("blue", "red"), lty = 1)
# Appliquer les prévisions sur les données de test_data_1
predictions <- forecast(model_e, h = length(test_data_1_xts))
# Tracer les prévisions sur la période de test_data_1
plot(predictions, main = "Prévisions ARIMA pour test_data_1", xlim = range(index(test_data_1_xts)))
# Ajouter les données réelles de test_data_1
#lines(index(test_data_1_xts), test_data_1_xts, col = "red")
# Ajouter une légende
legend("topright", legend = c("Prévisions", "Réel"), col = c("blue", "red"), lty = 1)
# Ajuster un modèle ARIMA avec p=6666 et q=17000
model_e <- arima(train_data, order=c(3,0 , 3),include.mean = F)
# Résumé du modèle
summary(model_e)
# Appliquer les prévisions sur les données de test_data_1
predictions <- forecast(model_e, h = length(test_data_1_xts))
# Tracer les prévisions sur la période de test_data_1
plot(predictions, main = "Prévisions ARIMA pour test_data_1", xlim = range(index(test_data_1_xts)))
# Ajouter les données réelles de test_data_1
#lines(index(test_data_1_xts), test_data_1_xts, col = "red")
# Ajouter une légende
#legend("topright", legend = c("Prévisions", "Réel"), col = c("blue", "red"), lty = 1)
predictions
# Appliquer les prévisions sur les données de test_data_1
predictions <- forecast(model_e, h = length(test_data_1_xts))
# Tracer les prévisions sur la période de test_data_1
plot(predictions$mean, main = "Prévisions ARIMA pour test_data_1", xlim = range(index(test_data_1_xts)))
# Ajouter les données réelles de test_data_1
#lines(index(test_data_1_xts), test_data_1_xts, col = "red")
# Ajouter une légende
#legend("topright", legend = c("Prévisions", "Réel"), col = c("blue", "red"), lty = 1)
# Appliquer les prévisions sur les données de test_data_1
predictions <- forecast(model_e, h = length(test_data_1_xts))
# Tracer les prévisions sur la période de test_data_1
plot(predictions, main = "Prévisions ARIMA pour test_data_1", xlim = range(index(test_data_1_xts)))
# Ajouter les données réelles de test_data_1
lines(index(test_data_1_xts), test_data_1_xts, col = "red")
# Ajouter une légende
legend("topright", legend = c("Prévisions", "Réel"), col = c("blue", "red"), lty = 1)
# Appliquer les prévisions sur les données de test_data_1
# Appliquer les prévisions sur les données de test_data_1
predictions <- forecast(model_e, h = length(test_data_1_xts))
# Tracer les prévisions avec les données réelles (affichage seulement sur la période de test)
plot(predictions, main = "Prévisions ARIMA pour test_data_1", xlim = range(index(test_data_1_xts)))
# Ajouter les données réelles de test_data_1 sur le même graphique
lines(index(test_data_1_xts), test_data_1_xts, col = "red")
# Ajouter une légende pour les prévisions et les données réelles
legend("topright", legend = c("Prévisions", "Réel"), col = c("blue", "red"), lty = 1)
View(predictions)
View(predictions)
predictions
ength(test_data_1_xts)
length(test_data_1_xts)
predictions
# Prévisions sur la période de test
predictions <- forecast(model_e, h = 1590)
# Tracer les prévisions avec les intervalles de confiance
plot(predictions, main = "Prévisions ARIMA pour test_data_1", xlim = range(test_data_1))
# Tracer les données réelles
lines(test_data_1, col = "red")  # Les données réelles en rouge
# Ajouter une légende
legend("topright", legend = c("Prévisions", "Réel"), col = c("blue", "red"), lty = 1)
predictions
# Prévisions sur la période de test
predictions <- forecast(model_e, h = 1590)
# Tracer les prévisions avec les intervalles de confiance
plot(predictions$mean, main = "Prévisions ARIMA pour test_data_1", xlim = range(test_data_1))
predictions$mean
head(index(test_data_1))
# Création d'un index temporel pour les prévisions (suivant l'heure de la dernière observation dans test_data_1)
forecast_index <- seq(from = index(test_data_1)[length(test_data_1)] + 1,
by = "hour", length.out = length(predictions$mean))
# Créer un xts pour les prévisions avec le bon index
forecast_xts <- xts(predictions$mean, order.by = forecast_index)
# Tracer les prévisions et les données réelles
plot(forecast_xts, main = "Prévisions ARIMA pour test_data_1", xlim = range(index(test_data_1), index(forecast_xts)))
lines(test_data_1, col = "red")  # Tracer les données réelles en rouge
legend("topright", legend = c("Prévisions", "Réel"), col = c("blue", "red"), lty = 1)
predictions <- forecast(model, h = length(test_data_1_xts))
# Création d'un index temporel pour les prévisions (suivant l'heure de la dernière observation dans test_data_1)
forecast_index <- seq(from = index(test_data_1)[length(test_data_1)] + 1,
by = "hour", length.out = length(predictions$mean))
# Créer un xts pour les prévisions avec le bon index
forecast_xts <- xts(predictions$mean, order.by = forecast_index)
# Tracer les prévisions et les données réelles
plot(forecast_xts, main = "Prévisions ARIMA pour test_data_1", xlim = range(index(test_data_1), index(forecast_xts)))
lines(test_data_1, col = "red")  # Tracer les données réelles en rouge
legend("topright", legend = c("Prévisions", "Réel"), col = c("blue", "red"), lty = 1)
rm(list=ls())
